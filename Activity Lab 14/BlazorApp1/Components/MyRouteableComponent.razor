@page "/my-routeable-component"


<h4>Server List</h4>
<input @bind="searchTerm" placeholder="Search servers..." />
<button @onclick="SearchServers">Search</button>

<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>City</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (filteredServers.Any())
        {
            @foreach (var server in filteredServers)
            {
                <tr>
                    <td>@server.Id</td>
                    <td>@server.Name</td>
                    <td>@server.City</td>
                    <td>@(server.IsOnline ? "Online" : "Offline")</td>
                    <td>
                        <button @onclick="() => EditServer(server.Id)">Edit</button>
                        <button @onclick="() => DeleteServer(server.Id)">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5">No servers found.</td>
            </tr>
        }
    </tbody>
</table>

<h4>Add Server</h4>
<input @bind="newServer.Name" placeholder="Server Name" />
<input @bind="newServer.City" placeholder="City" />
<button @onclick="AddServer">Add</button>

@code {
    private string searchTerm = string.Empty;
    private List<Server> filteredServers = ServersRepository.GetServers();
    private Server newServer = new Server();

    private void SearchServers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredServers = ServersRepository.GetServers();
        }
        else
        {
            filteredServers = ServersRepository.SearchServers(searchTerm);
        }
    }

    private void AddServer()
    {
        if (!string.IsNullOrWhiteSpace(newServer.Name) && !string.IsNullOrWhiteSpace(newServer.City))
        {
            ServersRepository.AddServer(newServer);
            newServer = new Server(); // Reset the form
            filteredServers = ServersRepository.GetServers(); // Refresh the list
        }
    }

    private void EditServer(int serverId)
    {
        var server = ServersRepository.GetServerById(serverId);
        if (server != null)
        {
            // Logic to edit the server (not implemented here)
        }
    }

    private void DeleteServer(int serverId)
    {
        ServersRepository.DeleteServer(serverId);
        filteredServers = ServersRepository.GetServers();
    }

    public class Server
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string City { get; set; } = string.Empty;
        public bool IsOnline { get; set; } = false;
    }

    public static class ServersRepository
    {
        private static List<Server> servers = new List<Server>()
        {
            new Server {  Id = 1, Name = "Server1", City = "Toronto" },
            new Server {  Id = 2, Name = "Server2", City = "Toronto" },
            new Server {  Id = 3, Name = "Server3", City = "Toronto" },
            new Server {  Id = 4, Name = "Server4", City = "Toronto" },
            new Server {  Id = 5, Name = "Server5", City = "Montreal" },
            new Server {  Id = 6, Name = "Server6", City = "Montreal" },
            new Server {  Id = 7, Name = "Server7", City = "Montreal" },
            new Server {  Id = 8, Name = "Server8", City = "Ottawa" },
            new Server {  Id = 9, Name = "Server9", City = "Ottawa" },
            new Server {  Id = 10, Name = "Server10", City = "Calgary" },
            new Server {  Id = 11, Name = "Server11", City = "Calgary" },
            new Server {  Id = 12, Name = "Server12", City = "Halifax" },
            new Server {  Id = 13, Name = "Server13", City = "Halifax" },
        };

        public static void AddServer(Server server)
        {
            var maxId = servers.Max(s => s.Id);
            server.Id = maxId + 1;
            servers.Add(server);
        }

        public static List<Server> GetServers() => servers;

        public static List<Server> GetServersByCity(string cityName)
        {
            return servers.Where(s => s.City.Equals(cityName, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        public static Server? GetServerById(int id)
        {
            var server = servers.FirstOrDefault(s => s.Id == id);
            if (server != null)
            {
                return new Server
                    {
                        Id = server.Id,
                        Name = server.Name,
                        City = server.City,
                        IsOnline = server.IsOnline
                    };
            }

            return null;
        }

        public static void UpdateServer(int serverId, Server server)
        {
            if (serverId != server.Id) return;

            var serverToUpdate = servers.FirstOrDefault(s => s.Id == serverId);
            if (serverToUpdate != null)
            {
                serverToUpdate.IsOnline = server.IsOnline;
                serverToUpdate.Name = server.Name;
                serverToUpdate.City = server.City;
            }
        }

        public static void DeleteServer(int serverId)
        {
            var server = servers.FirstOrDefault(s => s.Id == serverId);
            if (server != null)
            {
                servers.Remove(server);
            }
        }

        public static List<Server> SearchServers(string serverFilter)
        {
            return servers.Where(s => s.Name.Contains(serverFilter, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

}
